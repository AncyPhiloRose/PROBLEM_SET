1)For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers.
 Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. 
 For each pair, return the names in the pair in alphabetical order. 
>>select distinct(name),rid from reviewer re join rating ra on re.rid=ra.rid order by name;

2)Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, 
 along with the director name. Sort by director name, then movie title.
>>select title from movie union select name from reviewer where title>1 order by name,title;

3)Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. 
>>select m.title,avg(stars) from movie m join rating ra on m.mid=ra.mid group by stars;

4)Find the names of all students who are friends with someone named Gabriel.
>>select h.name from Highschooler h inner join friend f on h.id=f.id1 
 inner join h1.id=f.id2 where h1.name='Gabriel';

5)For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, 
 and the name and grade of the student they like. 
>>select h.name,h,grade,h1.name,h1.grade from Highschooler h
inner join likes l on h.id=l.id1 inner join h1.id=l.id2
where (h.grade-h1.grade)>=2;

6)Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades.
 Sort by grade, then by name within each grade. 
>>select name,grades from Highschooler where id not in (select distinct id1 union select distinct id2) order by grade,name;

7)For every situation where student A likes student B, but we have no information about whom B likes 
(that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades. 
>>select h.name,h.grade,h1.name,h1.grade from Highschooler h inner join likes l on h.id=likes.id1
inner join h1.id2=likes.id2 where h1.id not in (select distinct id1 from likes);

8)Find the difference between the number of students in the school and the number of different first names. 

>>select count(*)-count(distinct name) from highschooler;

9) Find the name and grade of all students who are liked by more than one other student. 
>>select  name,grades from highschooler h inner join likes l on h.id=l.id1 group by id1 having count(*)>1;

10)What is the average number of friends per student? 
select avg(count) from friend group by id1;



